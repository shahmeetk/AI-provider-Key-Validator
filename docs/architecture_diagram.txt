# LLM API Key Validator - Architecture Diagram

+-------------------------+     +-------------------------+     +-------------------------+
|                         |     |                         |     |                         |
|  UI Layer               |     |  Core Layer             |     |  External Services      |
|  (Streamlit)            |<--->|  (API Keys, Validators) |<--->|  (LLM Provider APIs)    |
|                         |     |                         |     |                         |
+-------------------------+     +-------------------------+     +-------------------------+
           ^                              ^                              ^
           |                              |                              |
           v                              v                              v
+-------------------------+     +-------------------------+     +-------------------------+
|                         |     |                         |     |                         |
|  Utils Layer            |     |  Data Layer             |     |  Logging Layer          |
|  (Detection, CSV)       |<--->|  (Provider Info, History)|<--->|  (Diagnostics)          |
|                         |     |                         |     |                         |
+-------------------------+     +-------------------------+     +-------------------------+

## Modular Structure

+------------------+     +------------------+     +------------------+     +------------------+
| main.py          |     | core/            |     | validators/      |     | ui/              |
| - Entry point    |---->| - api_key.py     |---->| - openai.py      |---->| - main_app.py    |
|                  |     | - validator.py   |     | - anthropic.py   |     | - single_key.py  |
+------------------+     +------------------+     | - mistral.py     |     | - bulk_valid.py  |
        |                        |                | - groq.py        |     | - history.py     |
        v                        v                | - cohere.py      |     | - provider_info.py|
+------------------+     +------------------+     | - google.py      |     +------------------+
| utils/           |     | data/            |     | - openrouter.py  |
| - detection.py   |     | - provider_info  |     | - together.py    |
| - storage.py     |     |   .json          |     | - perplexity.py  |
| - csv_utils.py   |     | - history.json   |     | - ...            |
| - logger.py      |     +------------------+     +------------------+
+------------------+

## Data Flow:
1. User inputs API key through Streamlit UI (ui/single_key.py or ui/bulk_validation.py)
2. Provider detection (utils/detection.py) identifies the provider
3. ValidatorFactory creates appropriate validator (core/validator.py)
4. Validator checks key against provider API (validators/[provider].py)
5. Results are displayed in UI and stored in history (utils/storage.py)
6. Provider info (data/provider_info.json) is used for display and categorization
7. Logs capture errors and warnings for debugging (utils/logger.py)

## Component Responsibilities:
- UI Layer (ui/): Handles all user interactions and display
  - main_app.py: Main Streamlit application
  - single_key.py: Single key validation page
  - bulk_validation.py: Bulk validation page
  - history.py: Validation history page
  - provider_info.py: Provider information page

- Core Layer (core/):
  - api_key.py: Base APIKey class and provider-specific subclasses
  - validator.py: Base Validator interface and factory

- Validators Layer (validators/):
  - Provider-specific validators implementing the Validator interface
  - Each validator handles API calls and response parsing for a specific provider

- Utils Layer (utils/):
  - detection.py: Provider detection utilities
  - storage.py: Manages validation history
  - csv_utils.py: Handles CSV operations for bulk validation
  - logger.py: Captures errors, warnings, and debug information

- Data Layer (data/):
  - provider_info.json: Metadata about providers, free tiers, etc.
  - history.json: Validation history
